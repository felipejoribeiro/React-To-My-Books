{"version":3,"sources":["serviceWorker.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","CardList","robots","Error","SearchBox","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCSSC,EAxBE,SAAC,GAAa,EAAZC,OAGf,MAAM,IAAIC,MAAM,QCSLC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKC,UAAU,OACb,2BACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAWJ,MCIJK,EAXA,SAACC,GACd,OAEE,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCiBEC,E,kDApBb,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHI,E,8DAOAC,EAAMC,GACtBC,KAAKC,SAAS,CAAEJ,UAAS,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACN,uDAEAG,KAAKX,MAAMK,a,GAhBGQ,aC8DZC,G,wDAjDb,aAAc,IAAD,8BACX,gBAoBFC,eAAiB,SAACC,GAEhB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SApB1C,EAAKZ,MAAQ,CACXhB,OAAQ,GACR0B,YAAa,IALJ,E,gEAWO,IAAD,OAIjBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAAErB,OAAQiC,S,+BASnC,IAAD,EAC0Bb,KAAKJ,MAA7BhB,EADF,EACEA,OAAQ0B,EADV,EACUA,YACVQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACnC,OAAOA,EAAMC,KAAKC,cAAcC,SAASb,EAAYY,kBAGvD,OAAQtC,EAAOwC,OAGX,yBAAKpC,UAAU,MACb,8CACA,kBAAC,EAAD,CAAWD,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,OAAUkC,OAP5B,2C,GAlCYZ,c,MCHlBmB,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,a","file":"static/js/main.b5cd27a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n  if(true){\n    throw new Error('noo');\n  }\n  return(\n  <div> \n    {\n      //this returns list of card tags with the parameters passed\n      robots.map( (user, i) => {\n        return (\n          <Card \n            key={robots[i].id} \n            id={robots[i].id} \n            name={robots[i].name} \n            email={robots[i].email}\n          />\n        );\n      }) \n    }\n  </div>  \n  );\n}\n\nexport default CardList\n\n\n\n\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return(\n    <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search robots'\n        onChange= {searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    //The double brackets are for indicating css styles for JavaScript\n    <div style={{overflowY:'scroll', border: '5px solid black', height: '600px'}}>\n      {props.children} \n    </div>\n    \n  );\n\n}\n\nexport default Scroll;\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error,info){\n    this.setState({ hasError:true })\n  }\n\n  render(){\n    if (this.state.hasError){\n      return <h1>Ooops, That is not good</h1>\n    }else{\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundry;\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\n\n// Componentes first party:\nimport CardList from '../components/CardList';\n// import {robots} from './robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\n// Estilos para a p√°gina:\nimport './App.css';\n\n// This is called smart component because it has state. \n// Components without state are called dummy components.\nclass App extends Component {\n  constructor(){\n    super()\n\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n\n  }\n  \n  //This function is called after the render function. This triggers the render function again.\n  componentDidMount(){\n    // this grab the robots from the robots.js file.\n    // this.setState({robots:robots})\n    // Take information from online api, something more close to real projects:\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {this.setState({ robots: users })});\n  }\n  \n  // The arrow function here is very important as it passes a reference of the function and not the function. The consequence of this is that it carries the references from this class.\n  onSearchChange = (event) => {\n    //Reference to the state element that must be changed \n    this.setState({ searchfield: event.target.value})\n  }\n\n  render(){\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    \n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1> Robo Friends </h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots = {filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n// Autoral components:\nimport App from './containers/App.js';\n\n// Estilos para a p√°gina:\nimport './index.css';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}